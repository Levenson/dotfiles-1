;; Hey, Emacs! This is a -*- lisp -*- file!
;debian=sbcl

(in-package :stumpwm)

(asdf:oos 'asdf:load-op 'swank)

;; load Swank so we can connect with SLIME
(swank-loader:init)
(defvar *swank-p* nil)

;; define swank command to start swank server on port 4005
(defcommand swank () ()
  "Starts a swank server on port 4000 and notifies the user."
  (setf stumpwm:*top-level-error-action* :break)
  (if *swank-p*
      (message "Swank server already running.")
    (progn
      (swank:create-server :port 4000
                           :style swank:*communication-style*
                           :dont-close t)
      (setf *swank-p* t)
      (message "Starting swank on port 4000."))))

(setf stumpwm::*debug-level* 1)
(setf *debug-stream* (open "~/.stumpwm.log" :direction :output :if-exists :supersede))
;; from http://en.wikipedia.org/wiki/User:Gwern/.stumpwmrc
(defun cat (&rest strings) "A shortcut for (concatenate 'string foo bar)."
  (apply 'concatenate 'string strings))

(asdf:initialize-source-registry)

(asdf:oos 'asdf:load-op :stumpwm.contrib.kbd-brightness)
(asdf:oos 'asdf:load-op :stumpwm.contrib.wifi)

;; Set sloppy focus
(setf *mouse-focus-policy* :sloppy)


;;
;; Mode line
;;

(load-module "battery-portable")

(setf *mode-line-foreground-color* "Gray50")
(setf *mode-line-background-color* "Gray20")

(defparameter *vol-status-command*
  "amixer get Master | egrep '[[:digit:]]+%' -o | head -1 | tr -d '\\n'")

(defparameter *screen-mode-line-format-last*
  (concatenate 'list
               (list "[^B%n^b] %W^>")
               (when (not (null (stumpwm.contrib.battery-portable::all-batteries
                                 (stumpwm.contrib.battery-portable::preferred-battery-method))))
                 (list "| %B "))
               (list "| Vol. "
                     '(:eval (run-shell-command *vol-status-command* t)))
               (list "| %i | [%d]")))

(setf *time-modeline-string* "%Y-%m-%d %a ^B%l:%M^b")
(setf *screen-mode-line-format* "[^B%n^b]%W")

;; Turn on the modeline for each head with different mode lines
(let ((heads (reverse (screen-heads (current-screen)))))
  (loop :for head :in (cdr heads)
        :do (enable-mode-line (current-screen) head t *screen-mode-line-format*))
  (enable-mode-line (current-screen) (car heads) t *screen-mode-line-format-last*))

(setf *mode-line-timeout* 10) ; Update every 10 seconds if nothing else has triggered it already.
(turn-on-mode-line-timer)

(setf *window-format* "%m%n%s%c")

;; message windows

(setf *message-window-gravity* :center)

(setf *message-window-padding* 20)
(set-msg-border-width 2)

(setf *input-window-gravity* :bottom-left)

;;
;; Mixer keys
;;

(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec amixer set Master 5%-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec amixer set Master 5%+")
(define-key *top-map* (kbd "XF86AudioMute") "exec amixer set Master toggle")


;;
;; Brightness
;;

(load-module "kbd-brightness")
(setf stumpwm.contrib.kbd-brightness:*keyboard-brightness-display* t)
(define-key *top-map* (kbd "XF86KbdBrightnessUp") "kbd-brightness 25")
(define-key *top-map* (kbd "XF86KbdBrightnessDown") "kbd-brightness -25")


;;
;; Brightness Control
;;

(defun parse-string-to-float (line)
  (car
   (with-input-from-string (s line)
     (loop
       :for num := (read s nil nil)
       :while num
       :collect num))))

(defcommand brightness (value) ((:number "Adjust brightness: "))
  "Increment brightness."
  (let ((arg (if (plusp value) "-inc" "-dec")))
    (run-shell-command (format nil "xbacklight ~a ~a" arg (abs value))))
  (format nil "Brightness: ~,2f"
          (parse-string-to-float
           (run-shell-command "xbacklight" t))))

(define-key *top-map* (kbd "XF86MonBrightnessUp") "brightness 10")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "brightness -10")

;;** 2 (info "(stumpwm)Key Bindings")

;; `*top-map*' is the top level key map. This is where you'll find the
;; binding for the prefix map.
;;
;; `*root-map*' is the keymap by default bound to `C-t'. It is known as the
;; prefix map.

;; new root map bindings
(define-key *top-map* (kbd "s-t") '*root-map*)
(undefine-key *top-map* (kbd "C-t"))

(define-key *top-map* (kbd "s-o") "fnext")

(set-prefix-key (kbd "s-t"))

(define-key *root-map* (kbd "I") "show-window-properties")
(define-key *top-map* (kbd "s-k") "delete")

(define-key *top-map* (kbd "s-0") "select-window-by-number 0")
(define-key *top-map* (kbd "s-1") "select-window-by-number 1")
(define-key *top-map* (kbd "s-2") "select-window-by-number 2")
(define-key *top-map* (kbd "s-3") "select-window-by-number 3")
(define-key *top-map* (kbd "s-4") "select-window-by-number 4")
(define-key *top-map* (kbd "s-5") "select-window-by-number 5")
(define-key *top-map* (kbd "s-6") "select-window-by-number 6")
(define-key *top-map* (kbd "s-7") "select-window-by-number 7")
(define-key *top-map* (kbd "s-8") "select-window-by-number 8")
(define-key *top-map* (kbd "s-9") "select-window-by-number 9")


(define-key *top-map* (kbd "M-Up")    "move-window up")
(define-key *top-map* (kbd "M-Down")  "move-window down")
(define-key *top-map* (kbd "M-Left")  "move-window left")
(define-key *top-map* (kbd "M-Right") "move-window right")


; launch Web browser
(defcommand conkeror () ()
  "Start Firefox or switch to it, if it is already running."
  (run-or-raise "conkeror" '(:class "Conkeror")))
(define-key *root-map* (kbd "u") "conkeror")
(define-key *top-map* (kbd "s-u") "conkeror")


;; ASK the user for a search string and search for it in Wikipedia
(defcommand wikipedia (search)
  ((:string "Search in Wikipedia for: "))
  "prompt the user for a search term and look it up in the English Wikipedia"
  (check-type search string)
  (let ((uri (format nil "http://en.wikipedia.org/wiki/Special:Search?search=~a" search)))
    (run-shell-command
     (cat "iceweasel -new-tab \"" uri "\""))))

;; ask the user for a search string and search for it in Google
(defcommand google (search)
  ((:string "Search in Google for: "))
  "prompt the user for a search term and look it up in Google "
  (check-type search string)
  (let ((uri (format nil "http://www.google.com/search?q=~a" search)))
    (run-shell-command
     (cat "iceweasel -new-tab \"" uri "\""))))

;; log out
(define-key *root-map* (kbd "^") "quit")

(defcommand reinit () ()
  "reload the stumpwm config file"
  (run-commands "reload" "loadrc"))

(defcommand emacs () ()
  "Start emacs unless it is already running, in which case focus it."
  (run-or-raise "exec /usr/bin/emacs-snapshot --name emacs-primary-server --eval '(server-start)'"
                '(:class "Emacs" :instance "emacs-primary-server")))
(define-key *root-map* (kbd "e") "emacs")
(define-key *top-map* (kbd "s-e") "emacs")

(defcommand emacs-gnus () ()
  "Start erc unless it is already running, in which case focus it."
  (run-or-raise "exec /usr/bin/emacs-snapshot --name emacs-gnus --eval '(gnus)'"
                '(:class "Emacs" :instance "emacs-gnus")))
(define-key *root-map* (kbd "m") "emacs-gnus")
(define-key *top-map* (kbd "s-m") "emacs-gnus")

(defcommand gnome-terminal () ()
  "Start gnome-terminal unless it is already running, in which case
focus it."
  (run-or-raise "exec /usr/bin/gnome-terminal" '(:class "Gnome-terminal")))
(define-key *root-map* (kbd "c")   "gnome-terminal")
(define-key *root-map* (kbd "C-c") "gnome-terminal")
(define-key *top-map* (kbd "s-c") "gnome-terminal")

;;
;; MPD
;;

(load-module "mpd")
(define-key *top-map* (kbd "s-p") '*mpd-map*)
(define-key *top-map* (kbd "XF86Forward") "mpd-next")
(define-key *top-map* (kbd "XF86Back") "mpd-prev")
(define-key *top-map* (kbd "XF86AudioNext") "mpd-next")
(define-key *top-map* (kbd "XF86AudioPrev") "mpd-prev")
(define-key *top-map* (kbd "XF86AudioPlay") "mpd-toggle-pause")


;;;;
;;;; Menu
;;;;

(defparameter *start-menu*
  '(
    ("Accessories"
     ("Password and Keys" "revelation"))

    ("Graphics"
     ("Color Picker" "gcolor2")
     ("GIMP" "gimp")
     ("Inkscape" "inkscape")
     ("Picasa" "picasa")
     ("Scanner" "xsane"))

    ("Internet"
     ("Iceweasel" "iceweasel")
     ("Conkeror" "conkeror")
     ("Chrome" "google-chrome"))

    ("Office"
     ("LibreOffice" "libreoffice"))

    ("Sound and Video"
     ("Totem" "totem")
     ("Rhythmbox" "rhythmbox"))

    ("System Tools"
     ("Calculator" "speedcrunch")
     ("Disk space" "filelight")
     ("File Manager" "nautilus --no-desktop")
     ("Nvidia X Server" "nvidia-settings")
     ("Power Preferences" "gnome-power-preferences")
     ("Printers" "system-config-printer")
     ("Terminal Server" "tsclient")
         ; Turn on "Enable window manager's key bindings" for prefix key to
         ; be passed seamlessly (when *not* in full screen).
         ; Toggle between full screen and not full screen using
         ; `Ctrl-Alt-Enter'.

     ;; > In the case of Rdesktop you have to launch the app with the option
     ;; > '-K' so Stump can retain control over the key combinations that you
     ;; > input inside the remote session.

     ("VirtualBox" "VirtualBox"))

    ("X Windows Tools"
     ("Clipboard" "xclipboard")
     ("Fonts" "xfontsel")
     ("Ruler" "kruler")
     ("Events" "xev"))
    ))

(defcommand menu () ()
  "docstring"
  (labels ((pick (options)
                 (let ((selection (stumpwm::select-from-menu
                                   (current-screen) options "")))
                   (cond
                    ((null selection)
                     (throw 'stumpwm::error "Abort."))
                    ((stringp (second selection))
                     (second selection))
                    (t
                     (pick (cdr selection)))))))
    (let ((choice (pick *start-menu*)))
      (run-shell-command choice))))

(define-key *root-map* (kbd ".") "menu")


;;;; Groups

;; (gnew "Communication")

;; (define-frame-preference "Communication"
;;   ;; frame raise lock (lock AND raise == jumpto)
;;   (0 t   t :class "Emacs" :title "^ERC: .*$"))

;;;; Applications startup

;; Gnome Settings
;; (run-shell-command "/usr/bin/gnome-settings-daemon")
;; GNOME Keyring

;; ;; GNOME Keyring: GPG Agent
;; (run-shell-command "/usr/bin/gnome-keyring-daemon  --start --components=gpg")
;; ;; GNOME Keyring: Secret Service
;; (run-shell-command "/usr/bin/gnome-keyring-daemon  --start --components=secrets")
;; ;; GNOME Keyring: PKCS#11 Component
;; (run-shell-command "/usr/bin/gnome-keyring-daemon  --start --components=pkcs11")
;; ;; GNOME Keyring: SSH Agent
;; (run-shell-command "/usr/bin/gnome-keyring-daemon  --start --components=ssh")


;; GNOME Keyring
(let* ((output (run-shell-command "/usr/bin/gnome-keyring-daemon --start" t))
       (lines (loop :for i = 0 :then (1+ j)
                    :as j = (position #\linefeed output :start i)
                    :collect (subseq output i j)
                    :while j)))
  (dolist (line lines)
    (when (> (length line) 0)
      (let ((env-var (loop :for i = 0 :then (1+ j)
                           :as j = (position #\= line :start i)
                           :collect (subseq line i j)
                           :while j)))

        (sb-posix:setenv (car env-var) (cadr env-var) 1)))))

;; Currently i have to run these by hand to get a working gpgagent
;(sb-posix:setenv "GPG_AGENT_INFO" "/tmp/keyring-ssh9yh/gpg:0:1" 0)
;(sb-posix:setenv "SSH_AUTH_SOCK" "/tmp/keyring-ssh9yh/ssh" 0)

;; Enable devorak
(run-shell-command "/usr/bin/setxkbmap dvorak")

;; xmodmap
(run-shell-command "/usr/bin/xmodmap ~/.xmodmaprc")
